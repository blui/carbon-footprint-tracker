{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport OrganizationList from \"./components/OrganizationList\"; // Import OrganizationList component\nimport API_BASE_URL from \"./config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orgId, setOrgId] = useState(null); // Track selected organization ID\n  const [organizations, setOrganizations] = useState([]); // List of organizations\n  const [systems, setSystems] = useState([]); // List of systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState(null); // Track selected organization name\n\n  // Function to fetch all organizations from the backend\n  const fetchOrganizations = () => {\n    fetch(`${API_BASE_URL}/api/organizations`).then(res => res.json()).then(data => setOrganizations(data)) // Update organizations list\n    .catch(err => console.error(\"Error fetching organizations:\", err));\n  };\n\n  // Function to fetch systems for a specific organization\n  const fetchSystems = orgId => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`).then(res => res.json()).then(data => setSystems(data)) // Update systems list for the selected organization\n    .catch(err => console.error(\"Error fetching systems:\", err));\n  };\n\n  // Fetch organizations when the component mounts\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Fetch systems when an organization is selected\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  }, [orgId]);\n\n  // Handle organization creation\n  const handleOrganizationCreated = (createdOrgId, createdOrgName) => {\n    setOrgId(createdOrgId); // Set the newly created organization's ID\n    setSelectedOrg(createdOrgName); // Set the organization's name\n    setSystems([]); // Reset systems for the new organization\n\n    // Refresh the organizations list\n    fetchOrganizations();\n  };\n\n  // Handle system addition\n  const handleSystemAdded = () => {\n    // After a system is added, refetch all organizations to update the grid\n    fetchOrganizations();\n    if (orgId) {\n      fetchSystems(orgId); // Refresh systems list for the selected organization\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Footprint Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrganizationForm, {\n      onOrganizationCreated: handleOrganizationCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrganizationList, {\n      organizations: organizations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SystemForm, {\n      organizations: organizations,\n      onSystemAdded: handleSystemAdded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), systems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Systems for \", selectedOrg]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: systems.map(system => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [system.type, \": \", system.details]\n        }, system._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KGvnacJ+u6r+378BP03bglN5nZs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","OrganizationForm","SystemForm","OrganizationList","API_BASE_URL","jsxDEV","_jsxDEV","App","_s","orgId","setOrgId","organizations","setOrganizations","systems","setSystems","selectedOrg","setSelectedOrg","fetchOrganizations","fetch","then","res","json","data","catch","err","console","error","fetchSystems","handleOrganizationCreated","createdOrgId","createdOrgName","handleSystemAdded","children","fileName","_jsxFileName","lineNumber","columnNumber","onOrganizationCreated","onSystemAdded","length","map","system","type","details","_id","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/App.tsx"],"sourcesContent":["// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport OrganizationList from \"./components/OrganizationList\"; // Import OrganizationList component\nimport API_BASE_URL from \"./config\";\n\nconst App: React.FC = () => {\n  const [orgId, setOrgId] = useState<string | null>(null); // Track selected organization ID\n  const [organizations, setOrganizations] = useState<any[]>([]); // List of organizations\n  const [systems, setSystems] = useState<any[]>([]); // List of systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState<string | null>(null); // Track selected organization name\n\n  // Function to fetch all organizations from the backend\n  const fetchOrganizations = () => {\n    fetch(`${API_BASE_URL}/api/organizations`)\n      .then((res) => res.json())\n      .then((data) => setOrganizations(data)) // Update organizations list\n      .catch((err) => console.error(\"Error fetching organizations:\", err));\n  };\n\n  // Function to fetch systems for a specific organization\n  const fetchSystems = (orgId: string) => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`)\n      .then((res) => res.json())\n      .then((data) => setSystems(data)) // Update systems list for the selected organization\n      .catch((err) => console.error(\"Error fetching systems:\", err));\n  };\n\n  // Fetch organizations when the component mounts\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Fetch systems when an organization is selected\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  }, [orgId]);\n\n  // Handle organization creation\n  const handleOrganizationCreated = (\n    createdOrgId: string,\n    createdOrgName: string\n  ) => {\n    setOrgId(createdOrgId); // Set the newly created organization's ID\n    setSelectedOrg(createdOrgName); // Set the organization's name\n    setSystems([]); // Reset systems for the new organization\n\n    // Refresh the organizations list\n    fetchOrganizations();\n  };\n\n  // Handle system addition\n  const handleSystemAdded = () => {\n    // After a system is added, refetch all organizations to update the grid\n    fetchOrganizations();\n\n    if (orgId) {\n      fetchSystems(orgId); // Refresh systems list for the selected organization\n    }\n  };\n\n  return (\n    <div>\n      <h1>Carbon Footprint Tracker</h1>\n\n      {/* Form to create an organization */}\n      <OrganizationForm onOrganizationCreated={handleOrganizationCreated} />\n\n      {/* Display list of all organizations and systems */}\n      <OrganizationList organizations={organizations} />\n\n      {/* Form to add systems to any organization */}\n      <SystemForm\n        organizations={organizations}\n        onSystemAdded={handleSystemAdded}\n      />\n\n      {/* Conditionally display the list of systems for the selected organization */}\n      {systems.length > 0 && (\n        <div>\n          <h2>Systems for {selectedOrg}</h2>\n          <ul>\n            {systems.map((system) => (\n              <li key={system._id}>\n                {system.type}: {system.details}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}