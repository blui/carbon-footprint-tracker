{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport OrganizationList from \"./components/OrganizationList\"; // Import the organization list component\nimport API_BASE_URL from \"./config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orgId, setOrgId] = useState(null); // Selected organization ID\n  const [systems, setSystems] = useState([]); // List of systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState(null); // Selected organization name\n\n  // Function to fetch systems for a specific organization\n  const fetchSystems = orgId => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`).then(res => res.json()).then(data => setSystems(data)) // Store the systems in state\n    .catch(err => console.error(\"Error fetching systems:\", err)); // Handle errors\n  };\n\n  // useEffect hook to fetch systems when an organization is selected\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId); // Fetch systems when orgId changes\n    }\n  }, [orgId]); // Dependency array ensures this runs only when orgId changes\n\n  // Handle organization creation\n  const handleOrganizationCreated = (createdOrgId, createdOrgName) => {\n    setOrgId(createdOrgId); // Set the selected organization ID\n    setSelectedOrg(createdOrgName); // Set the selected organization name\n    setSystems([]); // Reset systems list for the new organization\n  };\n\n  // Handle system addition\n  const handleSystemAdded = () => {\n    if (orgId) {\n      fetchSystems(orgId); // Refresh systems after a new one is added\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Footprint Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrganizationForm, {\n      onOrganizationCreated: handleOrganizationCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), orgId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Add a System to \", selectedOrg]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SystemForm, {\n        orgId: orgId,\n        onSystemAdded: handleSystemAdded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), systems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Systems for \", selectedOrg]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: systems.map(system => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [system.type, \": \", system.details]\n        }, system._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(OrganizationList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rM0R35f8WaADsGTAia5nL73YYlM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","OrganizationForm","SystemForm","OrganizationList","API_BASE_URL","jsxDEV","_jsxDEV","App","_s","orgId","setOrgId","systems","setSystems","selectedOrg","setSelectedOrg","fetchSystems","fetch","then","res","json","data","catch","err","console","error","handleOrganizationCreated","createdOrgId","createdOrgName","handleSystemAdded","children","fileName","_jsxFileName","lineNumber","columnNumber","onOrganizationCreated","onSystemAdded","length","map","system","type","details","_id","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/App.tsx"],"sourcesContent":["// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport OrganizationList from \"./components/OrganizationList\"; // Import the organization list component\nimport API_BASE_URL from \"./config\";\n\nconst App: React.FC = () => {\n  const [orgId, setOrgId] = useState<string | null>(null); // Selected organization ID\n  const [systems, setSystems] = useState<any[]>([]); // List of systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState<string | null>(null); // Selected organization name\n\n  // Function to fetch systems for a specific organization\n  const fetchSystems = (orgId: string) => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`)\n      .then((res) => res.json())\n      .then((data) => setSystems(data)) // Store the systems in state\n      .catch((err) => console.error(\"Error fetching systems:\", err)); // Handle errors\n  };\n\n  // useEffect hook to fetch systems when an organization is selected\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId); // Fetch systems when orgId changes\n    }\n  }, [orgId]); // Dependency array ensures this runs only when orgId changes\n\n  // Handle organization creation\n  const handleOrganizationCreated = (\n    createdOrgId: string,\n    createdOrgName: string\n  ) => {\n    setOrgId(createdOrgId); // Set the selected organization ID\n    setSelectedOrg(createdOrgName); // Set the selected organization name\n    setSystems([]); // Reset systems list for the new organization\n  };\n\n  // Handle system addition\n  const handleSystemAdded = () => {\n    if (orgId) {\n      fetchSystems(orgId); // Refresh systems after a new one is added\n    }\n  };\n\n  return (\n    <div>\n      <h1>Carbon Footprint Tracker</h1>\n\n      {/* Form to create an organization */}\n      <OrganizationForm onOrganizationCreated={handleOrganizationCreated} />\n\n      {/* Conditionally render the system form if an organization is selected */}\n      {orgId && (\n        <div>\n          <h2>Add a System to {selectedOrg}</h2>\n          <SystemForm orgId={orgId} onSystemAdded={handleSystemAdded} />\n        </div>\n      )}\n\n      {/* Conditionally render the list of systems if any exist for the selected organization */}\n      {systems.length > 0 && (\n        <div>\n          <h2>Systems for {selectedOrg}</h2>\n          <ul>\n            {systems.map((system) => (\n              <li key={system._id}>\n                {system.type}: {system.details}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Render all organizations and their systems */}\n      <OrganizationList />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}