{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport OrganizationList from \"./components/OrganizationList\";\nimport API_BASE_URL from \"./config\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orgId, setOrgId] = useState(null); // Track selected organization ID\n  const [organizations, setOrganizations] = useState([]); // List of organizations\n  const [systems, setSystems] = useState([]); // List of systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState(null); // Track selected organization name\n\n  // Fetch all organizations from the backend\n  const fetchOrganizations = () => {\n    fetch(`${API_BASE_URL}/api/organizations`).then(res => res.json()).then(data => setOrganizations(data)).catch(err => console.error(\"Error fetching organizations:\", err));\n  };\n\n  // Fetch systems for a specific organization\n  const fetchSystems = orgId => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`).then(res => res.json()).then(data => setSystems(data)).catch(err => console.error(\"Error fetching systems:\", err));\n  };\n\n  // Fetch organizations on mount\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Fetch systems when an organization is selected\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  }, [orgId]);\n\n  // Handle organization creation\n  const handleOrganizationCreated = (createdOrgId, createdOrgName) => {\n    setOrgId(createdOrgId);\n    setSelectedOrg(createdOrgName);\n    setSystems([]);\n    fetchOrganizations();\n  };\n\n  // Handle system addition\n  const handleSystemAdded = () => {\n    fetchOrganizations();\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  };\n\n  // Handle selecting an organization from the sidebar\n  const handleSelectOrganization = (selectedOrgId, selectedOrgName) => {\n    setOrgId(selectedOrgId);\n    setSelectedOrg(selectedOrgName);\n    fetchSystems(selectedOrgId); // Fetch systems for the selected organization\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Organizations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrganizationList, {\n        organizations: organizations,\n        onSelect: handleSelectOrganization\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(OrganizationForm, {\n          onOrganizationCreated: handleOrganizationCreated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: selectedOrg ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedOrg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SystemForm, {\n          organizations: organizations,\n          onSystemAdded: handleSystemAdded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), systems.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: systems.map(system => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [system.type, \": \", system.details]\n          }, system._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No systems available for this organization.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please select an organization from the sidebar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KGvnacJ+u6r+378BP03bglN5nZs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","OrganizationForm","SystemForm","OrganizationList","API_BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","orgId","setOrgId","organizations","setOrganizations","systems","setSystems","selectedOrg","setSelectedOrg","fetchOrganizations","fetch","then","res","json","data","catch","err","console","error","fetchSystems","handleOrganizationCreated","createdOrgId","createdOrgName","handleSystemAdded","handleSelectOrganization","selectedOrgId","selectedOrgName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","style","marginTop","onOrganizationCreated","onSystemAdded","length","map","system","type","details","_id","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/App.tsx"],"sourcesContent":["// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport OrganizationList from \"./components/OrganizationList\";\nimport API_BASE_URL from \"./config\";\n\nconst App: React.FC = () => {\n  const [orgId, setOrgId] = useState<string | null>(null); // Track selected organization ID\n  const [organizations, setOrganizations] = useState<any[]>([]); // List of organizations\n  const [systems, setSystems] = useState<any[]>([]); // List of systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState<string | null>(null); // Track selected organization name\n\n  // Fetch all organizations from the backend\n  const fetchOrganizations = () => {\n    fetch(`${API_BASE_URL}/api/organizations`)\n      .then((res) => res.json())\n      .then((data) => setOrganizations(data))\n      .catch((err) => console.error(\"Error fetching organizations:\", err));\n  };\n\n  // Fetch systems for a specific organization\n  const fetchSystems = (orgId: string) => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`)\n      .then((res) => res.json())\n      .then((data) => setSystems(data))\n      .catch((err) => console.error(\"Error fetching systems:\", err));\n  };\n\n  // Fetch organizations on mount\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Fetch systems when an organization is selected\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  }, [orgId]);\n\n  // Handle organization creation\n  const handleOrganizationCreated = (\n    createdOrgId: string,\n    createdOrgName: string\n  ) => {\n    setOrgId(createdOrgId);\n    setSelectedOrg(createdOrgName);\n    setSystems([]);\n    fetchOrganizations();\n  };\n\n  // Handle system addition\n  const handleSystemAdded = () => {\n    fetchOrganizations();\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  };\n\n  // Handle selecting an organization from the sidebar\n  const handleSelectOrganization = (\n    selectedOrgId: string,\n    selectedOrgName: string\n  ) => {\n    setOrgId(selectedOrgId);\n    setSelectedOrg(selectedOrgName);\n    fetchSystems(selectedOrgId); // Fetch systems for the selected organization\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Left-side Navigation Pane */}\n      <div className=\"sidebar\">\n        <h2>Organizations</h2>\n        {/* List all organizations */}\n        <OrganizationList\n          organizations={organizations}\n          onSelect={handleSelectOrganization}\n        />\n\n        {/* Form to create a new organization */}\n        <div style={{ marginTop: \"20px\" }}>\n          <OrganizationForm onOrganizationCreated={handleOrganizationCreated} />\n        </div>\n      </div>\n\n      {/* Main content area */}\n      <div className=\"main-content\">\n        {selectedOrg ? (\n          <>\n            <h2>{selectedOrg}</h2>\n            <SystemForm\n              organizations={organizations}\n              onSystemAdded={handleSystemAdded}\n            />\n\n            {/* Display the list of systems for the selected organization */}\n            {systems.length > 0 ? (\n              <ul>\n                {systems.map((system) => (\n                  <li key={system._id}>\n                    {system.type}: {system.details}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>No systems available for this organization.</p>\n            )}\n          </>\n        ) : (\n          <p>Please select an organization from the sidebar.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}