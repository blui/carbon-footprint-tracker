{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport API_BASE_URL from \"./config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orgId, setOrgId] = useState(null); // Selected organization ID\n  const [systems, setSystems] = useState([]); // List of systems for the organization\n  const [selectedOrg, setSelectedOrg] = useState(null); // Track selected organization name for display\n\n  // Fetch systems for a specific organization\n  useEffect(() => {\n    if (orgId) {\n      fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`).then(res => res.json()).then(data => setSystems(data)).catch(err => console.error(\"Error fetching systems:\", err));\n    }\n  }, [orgId]);\n\n  // Function to handle organization creation\n  const handleOrganizationCreated = (createdOrgId, createdOrgName) => {\n    setOrgId(createdOrgId);\n    setSelectedOrg(createdOrgName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Footprint Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrganizationForm, {\n      onOrganizationCreated: handleOrganizationCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), orgId && /*#__PURE__*/_jsxDEV(SystemForm, {\n      orgId: orgId,\n      onSystemAdded: () => fetchSystems(orgId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), systems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Systems for \", selectedOrg]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: systems.map(system => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [system.type, \": \", system.details]\n        }, system._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rM0R35f8WaADsGTAia5nL73YYlM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","OrganizationForm","SystemForm","API_BASE_URL","jsxDEV","_jsxDEV","App","_s","orgId","setOrgId","systems","setSystems","selectedOrg","setSelectedOrg","fetch","then","res","json","data","catch","err","console","error","handleOrganizationCreated","createdOrgId","createdOrgName","children","fileName","_jsxFileName","lineNumber","columnNumber","onOrganizationCreated","onSystemAdded","fetchSystems","length","map","system","type","details","_id","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport SystemForm from \"./components/SystemForm\";\nimport API_BASE_URL from \"./config\";\n\nconst App = () => {\n  const [orgId, setOrgId] = useState<string | null>(null); // Selected organization ID\n  const [systems, setSystems] = useState<any[]>([]); // List of systems for the organization\n  const [selectedOrg, setSelectedOrg] = useState<string | null>(null); // Track selected organization name for display\n\n  // Fetch systems for a specific organization\n  useEffect(() => {\n    if (orgId) {\n      fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`)\n        .then((res) => res.json())\n        .then((data) => setSystems(data))\n        .catch((err) => console.error(\"Error fetching systems:\", err));\n    }\n  }, [orgId]);\n\n  // Function to handle organization creation\n  const handleOrganizationCreated = (\n    createdOrgId: string,\n    createdOrgName: string\n  ) => {\n    setOrgId(createdOrgId);\n    setSelectedOrg(createdOrgName);\n  };\n\n  return (\n    <div>\n      <h1>Carbon Footprint Tracker</h1>\n\n      {/* Form to create an organization */}\n      <OrganizationForm onOrganizationCreated={handleOrganizationCreated} />\n\n      {/* Form to add a system to the organization */}\n      {orgId && (\n        <SystemForm orgId={orgId} onSystemAdded={() => fetchSystems(orgId)} />\n      )}\n\n      {/* Display list of systems for the organization */}\n      {systems.length > 0 && (\n        <div>\n          <h2>Systems for {selectedOrg}</h2>\n          <ul>\n            {systems.map((system) => (\n              <li key={system._id}>\n                {system.type}: {system.details}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}