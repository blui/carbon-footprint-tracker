{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OrganizationForm from \"./components/OrganizationForm\";\nimport OrganizationList from \"./components/OrganizationList\"; // Ensure you import this component\nimport SystemForm from \"./components/SystemForm\";\nimport SystemTable from \"./components/SystemTable\"; // Import SystemTable component\nimport API_BASE_URL from \"./config\"; // Import API base URL\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orgId, setOrgId] = useState(null); // Track selected organization ID\n  const [systems, setSystems] = useState([]); // List of systems for the selected organization\n  const [organizations, setOrganizations] = useState([]); // List of organizations\n  const [selectedOrgName, setSelectedOrgName] = useState(null); // Track the selected organization name\n\n  // Function to fetch organizations from the backend API\n  const fetchOrganizations = () => {\n    console.log(\"Fetching organizations...\");\n    fetch(`${API_BASE_URL}/api/organizations`).then(res => res.json()).then(data => {\n      console.log(\"Fetched organizations:\", data);\n      setOrganizations(data); // Set organizations in state\n    }).catch(err => console.error(\"Error fetching organizations:\", err));\n  };\n\n  // Function to fetch systems for a selected organization\n  const fetchSystems = orgId => {\n    console.log(`Fetching systems for organization ID: ${orgId}...`);\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`).then(res => res.json()).then(data => {\n      console.log(\"Systems fetched from backend:\", data);\n      setSystems(data);\n    }).catch(err => console.error(\"Error fetching systems:\", err));\n  };\n\n  // Fetch organizations when the component is mounted\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Function to handle selecting an organization\n  const handleSelectOrganization = (selectedOrgId, selectedOrgName) => {\n    console.log(`Selected organization ID: ${selectedOrgId}, Name: ${selectedOrgName}`);\n    setOrgId(selectedOrgId); // Set the selected organization's ID\n    setSelectedOrgName(selectedOrgName); // Set the selected organization's name\n    fetchSystems(selectedOrgId); // Fetch systems for the selected organization\n  };\n\n  // Function to handle deleting an organization\n  const handleDeleteOrganization = deleteOrgId => {\n    fetch(`${API_BASE_URL}/api/organizations/${deleteOrgId}`, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to delete organization\");\n      }\n      return response.json(); // Return json only if status is ok\n    }).then(() => {\n      console.log(`Organization ${deleteOrgId} deleted.`);\n\n      // Only reset if the organization being deleted is currently selected\n      if (orgId === deleteOrgId) {\n        setOrgId(null); // Reset selected organization\n        setSelectedOrgName(null); // Reset selected organization name\n        setSystems([]); // Clear systems\n      }\n\n      // Update the organizations list by filtering out the deleted organization\n      setOrganizations(prevOrganizations => prevOrganizations.filter(org => org._id !== deleteOrgId));\n    }).catch(error => console.error(\"Error deleting organization:\", error));\n  };\n\n  // Function to handle updating an organization\n  const handleUpdateOrganization = (orgId, newName) => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: newName\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to update organization\");\n      }\n      return response.json();\n    }).then(() => {\n      // Update the organization's name directly in the state\n      setOrganizations(prevOrganizations => prevOrganizations.map(org => org._id === orgId ? {\n        ...org,\n        name: newName\n      } : org));\n\n      // Update the selected organization name if it's the one being updated\n      if (orgId === orgId) {\n        setSelectedOrgName(newName); // Update displayed name\n      }\n    }).catch(error => console.error(\"Error updating organization:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-blue-600 text-white text-center py-6 shadow-lg mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold\",\n        children: \"Carbon Footprint Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-72 bg-gray-800 text-white p-6 h-screen\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-6\",\n          children: \"Your Organizations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OrganizationList, {\n          organizations: organizations,\n          onSelect: handleSelectOrganization,\n          onUpdate: handleUpdateOrganization // Now expects orgId and newName\n          ,\n          onDelete: handleDeleteOrganization\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-8\",\n          children: /*#__PURE__*/_jsxDEV(OrganizationForm, {\n            onOrganizationCreated: fetchOrganizations\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow p-10 bg-white shadow-lg\",\n        children: selectedOrgName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold text-gray-700 mb-6\",\n            children: [\"Systems for \", selectedOrgName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex mb-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-1/2 pr-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-xl font-semibold mb-2\",\n                children: \"Organization Statistics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-gray-100 p-4 rounded-lg shadow-md space-y-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Calculated Emissions:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 23\n                  }, this), \" 1200 kg CO2\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"System Efficiency:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 23\n                  }, this), \" 85%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Organizational Grade:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 23\n                  }, this), \" B+\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-1/2\",\n              children: /*#__PURE__*/_jsxDEV(SystemForm, {\n                orgId: orgId // Pass the selected organization ID to SystemForm\n                ,\n                onSystemAdded: () => {\n                  console.log(\"System added, refetching systems...\");\n                  fetchSystems(orgId); // Refresh systems list after adding a system\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), systems.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-8\",\n            children: /*#__PURE__*/_jsxDEV(SystemTable, {\n              systems: systems,\n              onDeleteSystem: systemId => {\n                console.log(`Deleting system with ID: ${systemId}`);\n                fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems/${systemId}`, {\n                  method: \"DELETE\"\n                }).then(() => {\n                  console.log(\"System deleted, refetching systems...\");\n                  fetchSystems(orgId);\n                });\n              },\n              onEditSystem: systemId => {\n                const systemToEdit = systems.find(sys => sys._id === systemId);\n                if (!systemToEdit) return;\n                let updatedDetails = {};\n                if (systemToEdit.type === \"workflowSystem\") {\n                  const updatedName = prompt(\"Enter updated workflow name\", systemToEdit.name || \"\");\n                  const updatedWorkflow = prompt(\"Enter updated workflow items\", systemToEdit.workflow ? systemToEdit.workflow.join(\", \") : \"\");\n                  updatedDetails = {\n                    name: updatedName ? updatedName : systemToEdit.name,\n                    workflow: updatedWorkflow ? updatedWorkflow : systemToEdit.workflow\n                  };\n                } else if (systemToEdit.type === \"vendorSystem\") {\n                  const updatedName = prompt(\"Enter updated vendor name\", systemToEdit.name || \"\");\n                  const updatedClassification = prompt(\"Enter updated vendor classification\", systemToEdit.classification || \"\");\n                  updatedDetails = {\n                    name: updatedName ? updatedName : systemToEdit.name,\n                    classification: updatedClassification ? updatedClassification : systemToEdit.classification\n                  };\n                } else if (systemToEdit.type === \"vehicleSystem\") {\n                  var _systemToEdit$year;\n                  const updatedYear = prompt(\"Enter updated vehicle year\", ((_systemToEdit$year = systemToEdit.year) === null || _systemToEdit$year === void 0 ? void 0 : _systemToEdit$year.toString()) || \"\");\n                  const updatedMake = prompt(\"Enter updated vehicle make\", systemToEdit.make || \"\");\n                  const updatedModel = prompt(\"Enter updated vehicle model\", systemToEdit.model || \"\");\n                  updatedDetails = {\n                    year: updatedYear ? updatedYear : systemToEdit.year,\n                    make: updatedMake ? updatedMake : systemToEdit.make,\n                    model: updatedModel ? updatedModel : systemToEdit.model\n                  };\n                }\n                fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems/${systemId}`, {\n                  method: \"PUT\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    type: systemToEdit.type,\n                    ...updatedDetails\n                  })\n                }).then(() => {\n                  console.log(\"System updated, refetching systems...\");\n                  fetchSystems(orgId);\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-500 mt-8\",\n            children: \"No systems available for this organization.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"Please select an organization to view its systems.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x3cCvcN0HGl0Bc5iSO6EvAarL4g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","OrganizationForm","OrganizationList","SystemForm","SystemTable","API_BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","orgId","setOrgId","systems","setSystems","organizations","setOrganizations","selectedOrgName","setSelectedOrgName","fetchOrganizations","console","log","fetch","then","res","json","data","catch","err","error","fetchSystems","handleSelectOrganization","selectedOrgId","handleDeleteOrganization","deleteOrgId","method","response","ok","Error","prevOrganizations","filter","org","_id","handleUpdateOrganization","newName","headers","body","JSON","stringify","name","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onUpdate","onDelete","onOrganizationCreated","onSystemAdded","length","onDeleteSystem","systemId","onEditSystem","systemToEdit","find","sys","updatedDetails","type","updatedName","prompt","updatedWorkflow","workflow","join","updatedClassification","classification","_systemToEdit$year","updatedYear","year","toString","updatedMake","make","updatedModel","model","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport OrganizationForm from \"./components/OrganizationForm\";\r\nimport OrganizationList from \"./components/OrganizationList\"; // Ensure you import this component\r\nimport SystemForm from \"./components/SystemForm\";\r\nimport SystemTable from \"./components/SystemTable\"; // Import SystemTable component\r\nimport API_BASE_URL from \"./config\"; // Import API base URL\r\n\r\nconst App = () => {\r\n  const [orgId, setOrgId] = useState<string | null>(null); // Track selected organization ID\r\n  const [systems, setSystems] = useState<any[]>([]); // List of systems for the selected organization\r\n  const [organizations, setOrganizations] = useState<any[]>([]); // List of organizations\r\n  const [selectedOrgName, setSelectedOrgName] = useState<string | null>(null); // Track the selected organization name\r\n\r\n  // Function to fetch organizations from the backend API\r\n  const fetchOrganizations = () => {\r\n    console.log(\"Fetching organizations...\");\r\n    fetch(`${API_BASE_URL}/api/organizations`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Fetched organizations:\", data);\r\n        setOrganizations(data); // Set organizations in state\r\n      })\r\n      .catch((err) => console.error(\"Error fetching organizations:\", err));\r\n  };\r\n\r\n  // Function to fetch systems for a selected organization\r\n  const fetchSystems = (orgId: string) => {\r\n    console.log(`Fetching systems for organization ID: ${orgId}...`);\r\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Systems fetched from backend:\", data);\r\n        setSystems(data);\r\n      })\r\n      .catch((err) => console.error(\"Error fetching systems:\", err));\r\n  };\r\n\r\n  // Fetch organizations when the component is mounted\r\n  useEffect(() => {\r\n    fetchOrganizations();\r\n  }, []);\r\n\r\n  // Function to handle selecting an organization\r\n  const handleSelectOrganization = (\r\n    selectedOrgId: string,\r\n    selectedOrgName: string\r\n  ) => {\r\n    console.log(\r\n      `Selected organization ID: ${selectedOrgId}, Name: ${selectedOrgName}`\r\n    );\r\n    setOrgId(selectedOrgId); // Set the selected organization's ID\r\n    setSelectedOrgName(selectedOrgName); // Set the selected organization's name\r\n    fetchSystems(selectedOrgId); // Fetch systems for the selected organization\r\n  };\r\n\r\n  // Function to handle deleting an organization\r\n  const handleDeleteOrganization = (deleteOrgId: string) => {\r\n    fetch(`${API_BASE_URL}/api/organizations/${deleteOrgId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to delete organization\");\r\n        }\r\n\r\n        return response.json(); // Return json only if status is ok\r\n      })\r\n      .then(() => {\r\n        console.log(`Organization ${deleteOrgId} deleted.`);\r\n\r\n        // Only reset if the organization being deleted is currently selected\r\n        if (orgId === deleteOrgId) {\r\n          setOrgId(null); // Reset selected organization\r\n          setSelectedOrgName(null); // Reset selected organization name\r\n          setSystems([]); // Clear systems\r\n        }\r\n\r\n        // Update the organizations list by filtering out the deleted organization\r\n        setOrganizations((prevOrganizations) =>\r\n          prevOrganizations.filter((org) => org._id !== deleteOrgId)\r\n        );\r\n      })\r\n      .catch((error) => console.error(\"Error deleting organization:\", error));\r\n  };\r\n\r\n  // Function to handle updating an organization\r\n  const handleUpdateOrganization = (orgId: string, newName: string) => {\r\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ name: newName }),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to update organization\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        // Update the organization's name directly in the state\r\n        setOrganizations((prevOrganizations) =>\r\n          prevOrganizations.map((org) =>\r\n            org._id === orgId ? { ...org, name: newName } : org\r\n          )\r\n        );\r\n\r\n        // Update the selected organization name if it's the one being updated\r\n        if (orgId === orgId) {\r\n          setSelectedOrgName(newName); // Update displayed name\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error updating organization:\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100\">\r\n      {/* Application Header */}\r\n      <header className=\"bg-blue-600 text-white text-center py-6 shadow-lg mb-6\">\r\n        <h1 className=\"text-3xl font-bold\">Carbon Footprint Tracker</h1>\r\n      </header>\r\n\r\n      <div className=\"flex\">\r\n        {/* Sidebar for Organizations */}\r\n        <div className=\"w-72 bg-gray-800 text-white p-6 h-screen\">\r\n          <h2 className=\"text-xl font-semibold mb-6\">Your Organizations</h2>\r\n\r\n          {/* Organization List with Edit and Delete */}\r\n          <OrganizationList\r\n            organizations={organizations}\r\n            onSelect={handleSelectOrganization}\r\n            onUpdate={handleUpdateOrganization} // Now expects orgId and newName\r\n            onDelete={handleDeleteOrganization}\r\n          />\r\n\r\n          {/* Form to add new organization */}\r\n          <div className=\"mt-8\">\r\n            <OrganizationForm onOrganizationCreated={fetchOrganizations} />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content Area */}\r\n        <div className=\"flex-grow p-10 bg-white shadow-lg\">\r\n          {selectedOrgName ? (\r\n            <>\r\n              <h2 className=\"text-2xl font-semibold text-gray-700 mb-6\">\r\n                Systems for {selectedOrgName}\r\n              </h2>\r\n\r\n              <div className=\"flex mb-8\">\r\n                <div className=\"w-1/2 pr-4\">\r\n                  <h3 className=\"text-xl font-semibold mb-2\">\r\n                    Organization Statistics\r\n                  </h3>\r\n                  <div className=\"bg-gray-100 p-4 rounded-lg shadow-md space-y-4\">\r\n                    <p>\r\n                      <strong>Calculated Emissions:</strong> 1200 kg CO2\r\n                    </p>\r\n                    <p>\r\n                      <strong>System Efficiency:</strong> 85%\r\n                    </p>\r\n                    <p>\r\n                      <strong>Organizational Grade:</strong> B+\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"w-1/2\">\r\n                  <SystemForm\r\n                    orgId={orgId!} // Pass the selected organization ID to SystemForm\r\n                    onSystemAdded={() => {\r\n                      console.log(\"System added, refetching systems...\");\r\n                      fetchSystems(orgId!); // Refresh systems list after adding a system\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {systems.length > 0 ? (\r\n                <div className=\"mt-8\">\r\n                  <SystemTable\r\n                    systems={systems}\r\n                    onDeleteSystem={(systemId) => {\r\n                      console.log(`Deleting system with ID: ${systemId}`);\r\n                      fetch(\r\n                        `${API_BASE_URL}/api/organizations/${orgId}/systems/${systemId}`,\r\n                        {\r\n                          method: \"DELETE\",\r\n                        }\r\n                      ).then(() => {\r\n                        console.log(\"System deleted, refetching systems...\");\r\n                        fetchSystems(orgId!);\r\n                      });\r\n                    }}\r\n                    onEditSystem={(systemId) => {\r\n                      const systemToEdit = systems.find(\r\n                        (sys) => sys._id === systemId\r\n                      );\r\n\r\n                      if (!systemToEdit) return;\r\n\r\n                      let updatedDetails = {};\r\n\r\n                      if (systemToEdit.type === \"workflowSystem\") {\r\n                        const updatedName = prompt(\r\n                          \"Enter updated workflow name\",\r\n                          systemToEdit.name || \"\"\r\n                        );\r\n                        const updatedWorkflow = prompt(\r\n                          \"Enter updated workflow items\",\r\n                          systemToEdit.workflow\r\n                            ? systemToEdit.workflow.join(\", \")\r\n                            : \"\"\r\n                        );\r\n\r\n                        updatedDetails = {\r\n                          name: updatedName ? updatedName : systemToEdit.name,\r\n                          workflow: updatedWorkflow\r\n                            ? updatedWorkflow\r\n                            : systemToEdit.workflow,\r\n                        };\r\n                      } else if (systemToEdit.type === \"vendorSystem\") {\r\n                        const updatedName = prompt(\r\n                          \"Enter updated vendor name\",\r\n                          systemToEdit.name || \"\"\r\n                        );\r\n                        const updatedClassification = prompt(\r\n                          \"Enter updated vendor classification\",\r\n                          systemToEdit.classification || \"\"\r\n                        );\r\n                        updatedDetails = {\r\n                          name: updatedName ? updatedName : systemToEdit.name,\r\n                          classification: updatedClassification\r\n                            ? updatedClassification\r\n                            : systemToEdit.classification,\r\n                        };\r\n                      } else if (systemToEdit.type === \"vehicleSystem\") {\r\n                        const updatedYear = prompt(\r\n                          \"Enter updated vehicle year\",\r\n                          systemToEdit.year?.toString() || \"\"\r\n                        );\r\n                        const updatedMake = prompt(\r\n                          \"Enter updated vehicle make\",\r\n                          systemToEdit.make || \"\"\r\n                        );\r\n                        const updatedModel = prompt(\r\n                          \"Enter updated vehicle model\",\r\n                          systemToEdit.model || \"\"\r\n                        );\r\n                        updatedDetails = {\r\n                          year: updatedYear ? updatedYear : systemToEdit.year,\r\n                          make: updatedMake ? updatedMake : systemToEdit.make,\r\n                          model: updatedModel\r\n                            ? updatedModel\r\n                            : systemToEdit.model,\r\n                        };\r\n                      }\r\n\r\n                      fetch(\r\n                        `${API_BASE_URL}/api/organizations/${orgId}/systems/${systemId}`,\r\n                        {\r\n                          method: \"PUT\",\r\n                          headers: { \"Content-Type\": \"application/json\" },\r\n                          body: JSON.stringify({\r\n                            type: systemToEdit.type,\r\n                            ...updatedDetails,\r\n                          }),\r\n                        }\r\n                      ).then(() => {\r\n                        console.log(\"System updated, refetching systems...\");\r\n                        fetchSystems(orgId!);\r\n                      });\r\n                    }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-500 mt-8\">\r\n                  No systems available for this organization.\r\n                </p>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <p className=\"text-gray-500\">\r\n              Please select an organization to view its systems.\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}