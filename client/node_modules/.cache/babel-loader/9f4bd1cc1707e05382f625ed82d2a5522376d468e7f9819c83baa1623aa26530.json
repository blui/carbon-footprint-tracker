{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\components\\\\OrganizationForm.tsx\",\n  _s = $RefreshSig$();\n// client/src/components/OrganizationForm.tsx\n\nimport React, { useState } from \"react\"; // Import React and the useState hook\nimport API_BASE_URL from \"../config\"; // Import the base URL for making API calls\n\n// Define props expected by the OrganizationForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// OrganizationForm component - allows users to create new organizations\nconst OrganizationForm = ({\n  onOrganizationCreated\n}) => {\n  _s();\n  const [name, setName] = useState(\"\"); // State to store the organization name entered by the user\n  const [error, setError] = useState(null); // State to store any error messages\n\n  // Function to handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent the default form submission behavior (page refresh)\n    setError(null); // Clear previous error state before new submission\n\n    try {\n      // Make a POST request to create a new organization\n      const response = await fetch(`${API_BASE_URL}/api/organizations`, {\n        method: \"POST\",\n        // Define the method as POST to send data to the server\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // Set request headers\n        body: JSON.stringify({\n          name\n        }) // Convert the name state to JSON for the request body\n      });\n      if (!response.ok) {\n        // If the response status is not okay, throw an error\n        throw new Error(\"Failed to create organization\");\n      }\n\n      // Parse the response as JSON and extract the new organization's data\n      const data = await response.json();\n      // Notify the parent component of the newly created organization\n      onOrganizationCreated(data._id, data.name);\n      setName(\"\"); // Reset the form's input field after successful submission\n    } catch (err) {\n      // Handle any errors by setting an error message\n      setError(`Error creating organization: ${err.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"mt-4 p-4 bg-gray-50 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name // Bind the input value to the name state\n        ,\n        onChange: e => setName(e.target.value) // Update the state as the user types\n        ,\n        className: \"w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500\",\n        placeholder: \"Enter organization name\" // Placeholder serves as a label within the input field\n        ,\n        required: true // Make the input field required\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"w-full bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\",\n      children: \"Create Organization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(OrganizationForm, \"rcX/RnMeGXnhNzTXblcgztJ+C+E=\");\n_c = OrganizationForm;\nexport default OrganizationForm;\nvar _c;\n$RefreshReg$(_c, \"OrganizationForm\");","map":{"version":3,"names":["React","useState","API_BASE_URL","jsxDEV","_jsxDEV","OrganizationForm","onOrganizationCreated","_s","name","setName","error","setError","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","_id","err","message","onSubmit","className","children","type","value","onChange","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/components/OrganizationForm.tsx"],"sourcesContent":["// client/src/components/OrganizationForm.tsx\r\n\r\nimport React, { useState } from \"react\"; // Import React and the useState hook\r\nimport API_BASE_URL from \"../config\"; // Import the base URL for making API calls\r\n\r\n// Define props expected by the OrganizationForm component\r\ninterface OrganizationFormProps {\r\n  // Function prop that gets called when a new organization is created\r\n  onOrganizationCreated: (orgId: string, orgName: string) => void;\r\n}\r\n\r\n// OrganizationForm component - allows users to create new organizations\r\nconst OrganizationForm: React.FC<OrganizationFormProps> = ({\r\n  onOrganizationCreated,\r\n}) => {\r\n  const [name, setName] = useState(\"\"); // State to store the organization name entered by the user\r\n  const [error, setError] = useState<string | null>(null); // State to store any error messages\r\n\r\n  // Function to handle form submission\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault(); // Prevent the default form submission behavior (page refresh)\r\n    setError(null); // Clear previous error state before new submission\r\n\r\n    try {\r\n      // Make a POST request to create a new organization\r\n      const response = await fetch(`${API_BASE_URL}/api/organizations`, {\r\n        method: \"POST\", // Define the method as POST to send data to the server\r\n        headers: { \"Content-Type\": \"application/json\" }, // Set request headers\r\n        body: JSON.stringify({ name }), // Convert the name state to JSON for the request body\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // If the response status is not okay, throw an error\r\n        throw new Error(\"Failed to create organization\");\r\n      }\r\n\r\n      // Parse the response as JSON and extract the new organization's data\r\n      const data = await response.json();\r\n      // Notify the parent component of the newly created organization\r\n      onOrganizationCreated(data._id, data.name);\r\n      setName(\"\"); // Reset the form's input field after successful submission\r\n    } catch (err: unknown) {\r\n      // Handle any errors by setting an error message\r\n      setError(`Error creating organization: ${(err as Error).message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className=\"mt-4 p-4 bg-gray-50 rounded-lg shadow-lg\"\r\n    >\r\n      {/* The input field for entering the organization name */}\r\n      <div className=\"mb-4\">\r\n        <input\r\n          type=\"text\"\r\n          value={name} // Bind the input value to the name state\r\n          onChange={(e) => setName(e.target.value)} // Update the state as the user types\r\n          className=\"w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500\"\r\n          placeholder=\"Enter organization name\" // Placeholder serves as a label within the input field\r\n          required // Make the input field required\r\n        />\r\n      </div>\r\n\r\n      {/* Display any error message if one exists */}\r\n      {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n\r\n      {/* Submit button for creating an organization */}\r\n      <button\r\n        type=\"submit\"\r\n        className=\"w-full bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\r\n      >\r\n        Create Organization\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default OrganizationForm;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAC;AACzC,OAAOC,YAAY,MAAM,WAAW,CAAC,CAAC;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,gBAAiD,GAAGA,CAAC;EACzDC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAMW,YAAY,GAAG,MAAOC,CAAkB,IAAK;IACjDA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpBH,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEhB,IAAI;MACF;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,oBAAoB,EAAE;QAChEe,MAAM,EAAE,MAAM;QAAE;QAChBC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAAE;QACjDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb;QAAK,CAAC,CAAC,CAAE;MAClC,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACO,EAAE,EAAE;QAChB;QACA,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;;MAEA;MACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC;MACAnB,qBAAqB,CAACkB,IAAI,CAACE,GAAG,EAAEF,IAAI,CAAChB,IAAI,CAAC;MAC1CC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,OAAOkB,GAAY,EAAE;MACrB;MACAhB,QAAQ,CAAC,gCAAiCgB,GAAG,CAAWC,OAAO,EAAE,CAAC;IACpE;EACF,CAAC;EAED,oBACExB,OAAA;IACEyB,QAAQ,EAAEjB,YAAa;IACvBkB,SAAS,EAAC,0CAA0C;IAAAC,QAAA,gBAGpD3B,OAAA;MAAK0B,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnB3B,OAAA;QACE4B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEzB,IAAK,CAAC;QAAA;QACb0B,QAAQ,EAAGrB,CAAC,IAAKJ,OAAO,CAACI,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE,CAAC;QAAA;QAC1CH,SAAS,EAAC,wHAAwH;QAClIM,WAAW,EAAC,yBAAyB,CAAC;QAAA;QACtCC,QAAQ,OAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGL/B,KAAK,iBAAIN,OAAA;MAAG0B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAErB;IAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGtDrC,OAAA;MACE4B,IAAI,EAAC,QAAQ;MACbF,SAAS,EAAC,0IAA0I;MAAAC,QAAA,EACrJ;IAED;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAAClC,EAAA,CAhEIF,gBAAiD;AAAAqC,EAAA,GAAjDrC,gBAAiD;AAkEvD,eAAeA,gBAAgB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}