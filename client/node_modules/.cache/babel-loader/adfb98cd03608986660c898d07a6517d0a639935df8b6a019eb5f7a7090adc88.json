{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\"; // Import React and necessary hooks\nimport OrganizationForm from \"./components/OrganizationForm\"; // Import OrganizationForm component\nimport SystemForm from \"./components/SystemForm\"; // Import SystemForm component\nimport OrganizationList from \"./components/OrganizationList\"; // Import OrganizationList component\nimport API_BASE_URL from \"./config\"; // Import the base API URL\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [orgId, setOrgId] = useState(null); // State to track the selected organization's ID\n  const [organizations, setOrganizations] = useState([]); // State to store a list of organizations\n  const [systems, setSystems] = useState([]); // State to store systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState(null); // State to track the selected organization's name\n\n  // Function to fetch all organizations from the backend\n  const fetchOrganizations = () => {\n    fetch(`${API_BASE_URL}/api/organizations`).then(res => res.json()) // Parse the JSON response\n    .then(data => setOrganizations(data)) // Update the organizations state with fetched data\n    .catch(err => console.error(\"Error fetching organizations:\", err)); // Log errors, if any\n  };\n\n  // Function to fetch all systems for a specific organization\n  const fetchSystems = orgId => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`).then(res => res.json()) // Parse the JSON response\n    .then(data => setSystems(data)) // Update the systems state with fetched data\n    .catch(err => console.error(\"Error fetching systems:\", err)); // Log errors, if any\n  };\n\n  // Fetch all organizations when the component mounts\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Fetch systems for the selected organization when the orgId changes\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  }, [orgId]);\n\n  // Handle the creation of a new organization\n  const handleOrganizationCreated = (createdOrgId, createdOrgName) => {\n    setOrgId(createdOrgId); // Set the newly created organization's ID\n    setSelectedOrg(createdOrgName); // Set the newly created organization's name\n    setSystems([]); // Clear the systems list\n    fetchOrganizations(); // Refresh the list of organizations\n  };\n\n  // Handle the addition of a new system\n  const handleSystemAdded = () => {\n    fetchOrganizations(); // Refresh the list of organizations\n    if (orgId) {\n      fetchSystems(orgId); // Refresh the systems for the current organization\n    }\n  };\n\n  // Handle selecting an organization from the sidebar\n  const handleSelectOrganization = (selectedOrgId, selectedOrgName) => {\n    setOrgId(selectedOrgId); // Set the selected organization's ID\n    setSelectedOrg(selectedOrgName); // Set the selected organization's name\n    fetchSystems(selectedOrgId); // Fetch systems for the selected organization\n  };\n\n  // Handle updating an organization's name\n  const handleUpdateOrganization = async orgId => {\n    const updatedName = prompt(\"Enter new organization name:\"); // Prompt user for a new organization name\n    if (updatedName) {\n      await fetch(`${API_BASE_URL}/api/organizations/${orgId}`, {\n        method: \"PUT\",\n        // Send a PUT request to update the organization\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: updatedName\n        }) // Send the updated name in the request body\n      });\n      fetchOrganizations(); // Refresh the list of organizations\n    }\n  };\n\n  // Handle deleting an organization\n  const handleDeleteOrganization = async orgId => {\n    if (window.confirm(\"Are you sure you want to delete this organization?\")) {\n      await fetch(`${API_BASE_URL}/api/organizations/${orgId}`, {\n        method: \"DELETE\" // Send a DELETE request to delete the organization\n      });\n      fetchOrganizations(); // Refresh the list of organizations\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-blue-600 text-white text-center py-6 shadow-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold\",\n        children: \"Carbon Footprint Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-72 bg-gray-800 text-white p-6 h-screen\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4 text-center\",\n          children: \"Your Organizations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OrganizationList, {\n          organizations: organizations // Pass the list of organizations to the OrganizationList component\n          ,\n          onSelect: handleSelectOrganization // Pass the select handler\n          ,\n          onUpdate: handleUpdateOrganization // Pass the update handler\n          ,\n          onDelete: handleDeleteOrganization // Pass the delete handler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-8\",\n          children: /*#__PURE__*/_jsxDEV(OrganizationForm, {\n            onOrganizationCreated: handleOrganizationCreated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow p-10 bg-white shadow-lg\",\n        children: selectedOrg ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold text-gray-700 border-b-2 border-blue-600 pb-2\",\n            children: selectedOrg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SystemForm, {\n            orgId: orgId,\n            onSystemAdded: handleSystemAdded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), systems.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"mt-6\",\n            children: systems.map(system => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"py-4 border-b border-gray-300\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                className: \"font-semibold\",\n                children: system.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 23\n              }, this), \":\", \" \", system.details]\n            }, system._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-500 mt-4\",\n            children: \"No systems available for this organization.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"Please select an organization from the sidebar.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KGvnacJ+u6r+378BP03bglN5nZs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","OrganizationForm","SystemForm","OrganizationList","API_BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","orgId","setOrgId","organizations","setOrganizations","systems","setSystems","selectedOrg","setSelectedOrg","fetchOrganizations","fetch","then","res","json","data","catch","err","console","error","fetchSystems","handleOrganizationCreated","createdOrgId","createdOrgName","handleSystemAdded","handleSelectOrganization","selectedOrgId","selectedOrgName","handleUpdateOrganization","updatedName","prompt","method","headers","body","JSON","stringify","name","handleDeleteOrganization","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onUpdate","onDelete","onOrganizationCreated","onSystemAdded","length","map","system","type","details","_id","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/App.tsx"],"sourcesContent":["// client/src/App.tsx\n\nimport React, { useState, useEffect } from \"react\"; // Import React and necessary hooks\nimport OrganizationForm from \"./components/OrganizationForm\"; // Import OrganizationForm component\nimport SystemForm from \"./components/SystemForm\"; // Import SystemForm component\nimport OrganizationList from \"./components/OrganizationList\"; // Import OrganizationList component\nimport API_BASE_URL from \"./config\"; // Import the base API URL\n\nconst App: React.FC = () => {\n  const [orgId, setOrgId] = useState<string | null>(null); // State to track the selected organization's ID\n  const [organizations, setOrganizations] = useState<any[]>([]); // State to store a list of organizations\n  const [systems, setSystems] = useState<any[]>([]); // State to store systems for the selected organization\n  const [selectedOrg, setSelectedOrg] = useState<string | null>(null); // State to track the selected organization's name\n\n  // Function to fetch all organizations from the backend\n  const fetchOrganizations = () => {\n    fetch(`${API_BASE_URL}/api/organizations`)\n      .then((res) => res.json()) // Parse the JSON response\n      .then((data) => setOrganizations(data)) // Update the organizations state with fetched data\n      .catch((err) => console.error(\"Error fetching organizations:\", err)); // Log errors, if any\n  };\n\n  // Function to fetch all systems for a specific organization\n  const fetchSystems = (orgId: string) => {\n    fetch(`${API_BASE_URL}/api/organizations/${orgId}/systems`)\n      .then((res) => res.json()) // Parse the JSON response\n      .then((data) => setSystems(data)) // Update the systems state with fetched data\n      .catch((err) => console.error(\"Error fetching systems:\", err)); // Log errors, if any\n  };\n\n  // Fetch all organizations when the component mounts\n  useEffect(() => {\n    fetchOrganizations();\n  }, []);\n\n  // Fetch systems for the selected organization when the orgId changes\n  useEffect(() => {\n    if (orgId) {\n      fetchSystems(orgId);\n    }\n  }, [orgId]);\n\n  // Handle the creation of a new organization\n  const handleOrganizationCreated = (\n    createdOrgId: string,\n    createdOrgName: string\n  ) => {\n    setOrgId(createdOrgId); // Set the newly created organization's ID\n    setSelectedOrg(createdOrgName); // Set the newly created organization's name\n    setSystems([]); // Clear the systems list\n    fetchOrganizations(); // Refresh the list of organizations\n  };\n\n  // Handle the addition of a new system\n  const handleSystemAdded = () => {\n    fetchOrganizations(); // Refresh the list of organizations\n    if (orgId) {\n      fetchSystems(orgId); // Refresh the systems for the current organization\n    }\n  };\n\n  // Handle selecting an organization from the sidebar\n  const handleSelectOrganization = (\n    selectedOrgId: string,\n    selectedOrgName: string\n  ) => {\n    setOrgId(selectedOrgId); // Set the selected organization's ID\n    setSelectedOrg(selectedOrgName); // Set the selected organization's name\n    fetchSystems(selectedOrgId); // Fetch systems for the selected organization\n  };\n\n  // Handle updating an organization's name\n  const handleUpdateOrganization = async (orgId: string) => {\n    const updatedName = prompt(\"Enter new organization name:\"); // Prompt user for a new organization name\n    if (updatedName) {\n      await fetch(`${API_BASE_URL}/api/organizations/${orgId}`, {\n        method: \"PUT\", // Send a PUT request to update the organization\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name: updatedName }), // Send the updated name in the request body\n      });\n      fetchOrganizations(); // Refresh the list of organizations\n    }\n  };\n\n  // Handle deleting an organization\n  const handleDeleteOrganization = async (orgId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this organization?\")) {\n      await fetch(`${API_BASE_URL}/api/organizations/${orgId}`, {\n        method: \"DELETE\", // Send a DELETE request to delete the organization\n      });\n      fetchOrganizations(); // Refresh the list of organizations\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      {/* Application Header */}\n      <header className=\"bg-blue-600 text-white text-center py-6 shadow-lg\">\n        <h1 className=\"text-3xl font-bold\">Carbon Footprint Tracker</h1>\n      </header>\n\n      <div className=\"flex\">\n        {/* Sidebar for Organization List */}\n        <div className=\"w-72 bg-gray-800 text-white p-6 h-screen\">\n          <h2 className=\"text-xl font-semibold mb-4 text-center\">\n            Your Organizations\n          </h2>\n          <OrganizationList\n            organizations={organizations} // Pass the list of organizations to the OrganizationList component\n            onSelect={handleSelectOrganization} // Pass the select handler\n            onUpdate={handleUpdateOrganization} // Pass the update handler\n            onDelete={handleDeleteOrganization} // Pass the delete handler\n          />\n          <div className=\"mt-8\">\n            <OrganizationForm\n              onOrganizationCreated={handleOrganizationCreated}\n            />\n          </div>\n        </div>\n\n        {/* Main Content Area for Organization Details and System Form */}\n        <div className=\"flex-grow p-10 bg-white shadow-lg\">\n          {selectedOrg ? (\n            <>\n              <h2 className=\"text-2xl font-semibold text-gray-700 border-b-2 border-blue-600 pb-2\">\n                {selectedOrg}\n              </h2>\n              <SystemForm orgId={orgId!} onSystemAdded={handleSystemAdded} />\n              {systems.length > 0 ? (\n                <ul className=\"mt-6\">\n                  {systems.map((system) => (\n                    <li\n                      key={system._id}\n                      className=\"py-4 border-b border-gray-300\"\n                    >\n                      <strong className=\"font-semibold\">{system.type}</strong>:{\" \"}\n                      {system.details}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p className=\"text-gray-500 mt-4\">\n                  No systems available for this organization.\n                </p>\n              )}\n            </>\n          ) : (\n            <p className=\"text-gray-500\">\n              Please select an organization from the sidebar.\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}