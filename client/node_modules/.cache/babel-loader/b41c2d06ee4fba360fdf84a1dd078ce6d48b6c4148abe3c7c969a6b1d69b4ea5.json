{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\Downloads\\\\Repository\\\\carbon-footprint-tracker\\\\client\\\\src\\\\components\\\\OrganizationList.tsx\",\n  _s = $RefreshSig$();\n// client/src/components/OrganizationList.tsx\n\nimport React, { useEffect, useState } from \"react\";\nimport API_BASE_URL from \"../config\";\n\n// Define TypeScript interfaces for System and Organization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Main component to display a list of organizations and their systems\nconst OrganizationList = () => {\n  _s();\n  const [organizations, setOrganizations] = useState([]); // State to hold fetched organizations\n\n  // useEffect hook to fetch all organizations and their systems from the backend on component mount\n  useEffect(() => {\n    fetch(`${API_BASE_URL}/api/organizations`).then(res => res.json()).then(data => setOrganizations(data)) // Store the fetched data in state\n    .catch(err => console.error(\"Error fetching organizations:\", err)); // Handle errors\n  }, []); // Empty dependency array ensures this only runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Organizations and Systems\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"organization-grid\",\n      children: organizations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No organizations available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this) :\n      // Map through each organization and display its details\n      organizations.map(org => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"organization-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: org.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this), org.systems.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: org.systems.map(system => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: system.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 23\n            }, this), \": \", system.details]\n          }, system._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No systems available for this organization.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, org._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(OrganizationList, \"vMl6qucN+Rn4nTBDa0XOcBw4NAw=\");\n_c = OrganizationList;\nexport default OrganizationList;\nvar _c;\n$RefreshReg$(_c, \"OrganizationList\");","map":{"version":3,"names":["React","useEffect","useState","API_BASE_URL","jsxDEV","_jsxDEV","OrganizationList","_s","organizations","setOrganizations","fetch","then","res","json","data","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","org","name","systems","system","type","details","_id","_c","$RefreshReg$"],"sources":["C:/Users/brian/Downloads/Repository/carbon-footprint-tracker/client/src/components/OrganizationList.tsx"],"sourcesContent":["// client/src/components/OrganizationList.tsx\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport API_BASE_URL from \"../config\";\r\n\r\n// Define TypeScript interfaces for System and Organization\r\ninterface System {\r\n  _id: string; // Unique ID for each system\r\n  type: string; // The type of system (e.g., \"Supply Chain\", \"Vehicles\")\r\n  details: string; // Detailed description of the system\r\n}\r\n\r\ninterface Organization {\r\n  _id: string; // Unique ID for each organization\r\n  name: string; // Organization name\r\n  systems: System[]; // Array of systems associated with the organization\r\n}\r\n\r\n// Main component to display a list of organizations and their systems\r\nconst OrganizationList: React.FC = () => {\r\n  const [organizations, setOrganizations] = useState<Organization[]>([]); // State to hold fetched organizations\r\n\r\n  // useEffect hook to fetch all organizations and their systems from the backend on component mount\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/api/organizations`)\r\n      .then((res) => res.json())\r\n      .then((data) => setOrganizations(data)) // Store the fetched data in state\r\n      .catch((err) => console.error(\"Error fetching organizations:\", err)); // Handle errors\r\n  }, []); // Empty dependency array ensures this only runs once when the component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h2>All Organizations and Systems</h2>\r\n      <div className=\"organization-grid\">\r\n        {/* If no organizations are available, display a message */}\r\n        {organizations.length === 0 ? (\r\n          <p>No organizations available.</p>\r\n        ) : (\r\n          // Map through each organization and display its details\r\n          organizations.map((org) => (\r\n            <div key={org._id} className=\"organization-card\">\r\n              <h3>{org.name}</h3>\r\n              {/* Display associated systems if any are available */}\r\n              {org.systems.length > 0 ? (\r\n                <ul>\r\n                  {org.systems.map((system) => (\r\n                    <li key={system._id}>\r\n                      <strong>{system.type}</strong>: {system.details}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <p>No systems available for this organization.</p>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrganizationList;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,WAAW;;AAEpC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAaA;AACA,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAiB,EAAE,CAAC,CAAC,CAAC;;EAExE;EACAD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,GAAGP,YAAY,oBAAoB,CAAC,CACvCQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKL,gBAAgB,CAACK,IAAI,CAAC,CAAC,CAAC;IAAA,CACvCC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1E,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEX,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtClB,OAAA;MAAKmB,SAAS,EAAC,mBAAmB;MAAAL,QAAA,EAE/BX,aAAa,CAACiB,MAAM,KAAK,CAAC,gBACzBpB,OAAA;QAAAc,QAAA,EAAG;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;MAElC;MACAf,aAAa,CAACkB,GAAG,CAAEC,GAAG,iBACpBtB,OAAA;QAAmBmB,SAAS,EAAC,mBAAmB;QAAAL,QAAA,gBAC9Cd,OAAA;UAAAc,QAAA,EAAKQ,GAAG,CAACC;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAElBI,GAAG,CAACE,OAAO,CAACJ,MAAM,GAAG,CAAC,gBACrBpB,OAAA;UAAAc,QAAA,EACGQ,GAAG,CAACE,OAAO,CAACH,GAAG,CAAEI,MAAM,iBACtBzB,OAAA;YAAAc,QAAA,gBACEd,OAAA;cAAAc,QAAA,EAASW,MAAM,CAACC;YAAI;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAS,CAAC,MAAE,EAACO,MAAM,CAACE,OAAO;UAAA,GADxCF,MAAM,CAACG,GAAG;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEf,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,gBAELlB,OAAA;UAAAc,QAAA,EAAG;QAA2C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAClD;MAAA,GAbOI,GAAG,CAACM,GAAG;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcZ,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChB,EAAA,CAzCID,gBAA0B;AAAA4B,EAAA,GAA1B5B,gBAA0B;AA2ChC,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}